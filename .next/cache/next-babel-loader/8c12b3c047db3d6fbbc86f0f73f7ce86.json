{"ast":null,"code":"var _jsxFileName = \"/Users/tnelson/Documents/Self Study/Pluralsight/ReactWithNextJS/FinalOptimizedNextJS/pages/speakers.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport SpeakerCard from '../src/SpeakerCard';\nimport getConfig from 'next/config';\nconst {\n  serverRuntimeConfig,\n  publicRuntimeConfig\n} = getConfig();\n\nclass Speakers extends React.Component {\n  static GetSpeakersUrl() {\n    if (false) {\n      return process.env.RESTURL_SPEAKERS_PROD || publicRuntimeConfig.RESTURL_SPEAKERS_PROD;\n    } else {\n      return process.env.RESTURL_SPEAKERS_DEV;\n    }\n  }\n\n  static async getInitialProps({\n    req\n  }) {\n    // REST calls using json-server\n    const isServer = !!req;\n    console.log('isServer: ', isServer);\n\n    if (isServer) {\n      setInterval(() => {\n        var promise = axios.get(Speakers.GetSpeakersUrl()).then(response => {\n          return {\n            isLoading: false,\n            hasErrored: false,\n            speakerData: response.data\n          };\n        }).catch(error => {\n          return {\n            hasErrored: true,\n            messaage: error.message\n          };\n        });\n        return promise;\n      }, 2000);\n    } else {\n      console.log('are we here');\n      return {\n        speakerData: [...Array(5)].map((_, i) => ({\n          firstName: \"\",\n          lastName: \"\",\n          id: i\n        })),\n        isLoading: true\n      };\n    }\n  }\n\n  constructor(props) {\n    super(props); // Initializing state to axios call to db.json result data\n\n    this.state = {\n      isLoading: props.isLoading,\n      hasErrored: props.hasErrored,\n      message: props.message,\n      speakerData: props.speakerData\n    }; // console.log(props.speakerData);\n  }\n\n  componentDidMount() {\n    axios.get(Speakers.GetSpeakersUrl()).then(response => {\n      this.setState({\n        hasErrored: false,\n        isLoading: false,\n        speakerData: response.data\n      });\n    }).catch(error => {\n      this.setState({\n        hasErrored: true,\n        isLoading: false,\n        speakerData: []\n      });\n    });\n  }\n\n  render() {\n    // console.log('isLoading: ', this.state.isLoading);\n    // if (this.state.isLoading) {\n    //     return <div>...is Loading</div>\n    // }\n    return __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"card-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, this.state.speakerData.map(speaker => __jsx(\"div\", {\n      className: \"card col-4 cardmin margintopbotton20\",\n      key: speaker.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, __jsx(SpeakerCard, {\n      isLoading: this.props.isLoading,\n      speaker: speaker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\n;\nexport default Speakers;","map":{"version":3,"sources":["/Users/tnelson/Documents/Self Study/Pluralsight/ReactWithNextJS/FinalOptimizedNextJS/pages/speakers.js"],"names":["React","axios","SpeakerCard","getConfig","serverRuntimeConfig","publicRuntimeConfig","Speakers","Component","GetSpeakersUrl","process","env","RESTURL_SPEAKERS_PROD","RESTURL_SPEAKERS_DEV","getInitialProps","req","isServer","console","log","setInterval","promise","get","then","response","isLoading","hasErrored","speakerData","data","catch","error","messaage","message","Array","map","_","i","firstName","lastName","id","constructor","props","state","componentDidMount","setState","render","speaker"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport SpeakerCard from '../src/SpeakerCard';\n\nimport getConfig from 'next/config';\nconst { serverRuntimeConfig, publicRuntimeConfig } = getConfig();\n\nclass Speakers extends React.Component {\n    static GetSpeakersUrl() {\n        if (process.env.NODE_ENV === \"production\") {\n            return process.env.RESTURL_SPEAKERS_PROD\n                || publicRuntimeConfig.RESTURL_SPEAKERS_PROD;\n        } else {\n            return process.env.RESTURL_SPEAKERS_DEV;\n        }\n    }\n\n    static async getInitialProps({ req }) {\n        // REST calls using json-server\n        const isServer = !!req;\n        console.log('isServer: ', isServer);\n        if (isServer) {\n            setInterval(() => {\n                var promise = axios.get(Speakers.GetSpeakersUrl()).then(response => {\n                    return {\n                        isLoading: false,\n                        hasErrored: false,\n                        speakerData: response.data\n                    };\n                })\n                    .catch(error => {\n                        return {\n                            hasErrored: true,\n                            messaage: error.message\n                        }\n                    });\n                return promise;\n            }, 2000);\n        }\n        else {\n            console.log('are we here');\n            return {\n                speakerData: [...Array(5)].map((_, i) => ({\n                    firstName: \"\",\n                    lastName: \"\",\n                    id: i\n                })),\n                isLoading: true\n            };\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        // Initializing state to axios call to db.json result data\n        this.state = {\n            isLoading: props.isLoading,\n            hasErrored: props.hasErrored,\n            message: props.message,\n            speakerData: props.speakerData\n        }\n        // console.log(props.speakerData);\n    }\n\n    componentDidMount() {\n        axios\n            .get(Speakers.GetSpeakersUrl())\n            .then((response => {\n                this.setState({\n                    hasErrored: false,\n                    isLoading: false,\n                    speakerData: response.data\n                });\n            }))\n            .catch((error) => {\n                this.setState({\n                    hasErrored: true,\n                    isLoading: false,\n                    speakerData: []\n                });\n            });\n    }\n\n    render() {\n        // console.log('isLoading: ', this.state.isLoading);\n        // if (this.state.isLoading) {\n        //     return <div>...is Loading</div>\n        // }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"card-deck\">\n                        {this.state.speakerData.map((speaker) =>\n                            <div className=\"card col-4 cardmin margintopbotton20\" key={speaker.id}>\n                                <SpeakerCard isLoading={this.props.isLoading} speaker={speaker} />\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default Speakers;"]},"metadata":{},"sourceType":"module"}